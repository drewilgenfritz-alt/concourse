groups:
- jobs:
    # - delete-installation
    - test-platform-automation
    - export-installation
    - upgrade-opsman
    # - download-upload-and-stage-healthwatch-pas-exporter
    # - download-upload-and-stage-healthwatch

    # - configure-healthwatch-pas-exporter
    # - configure-healthwatch
    # - configure-tas
    # - apply-product-changes
    # - run-tas-smoketest-errand
    # - collect-telemetry
    # - stage-configure-apply-telemetry
  name: opsmanager
- jobs:
    - upload-and-stage-tas
    - upload-and-stage-hub
    - upload-and-stage-compliance-scanner
    - configure-tas
    - configure-compliance-scanner
    - configure-hub
    - apply-all-changes
  name: tpcf-products
- jobs:
    - create-root-ca
    - apply-new-ca
    - activate-new-ca-and-regenerate-certs
    - apply-certificates
    - cleanup-ca-certificate-authorities
  name: certificate-rotation
- jobs:
    - bump-director
    - bump-tas
    - bump-compliance-scanner
  name: gitops

resources:
- name: installation
  type: s3
  source:
    access_key_id: ((s3-access-key-id))
    secret_access_key: ((s3-secret-key))
    bucket: ((platform-automation-bucket))
    regexp: backups/installation/installation-(.*).zip

- name: tas-product
  type: s3
  source:
    access_key_id: ((s3-access-key-id))
    secret_access_key: ((s3-secret-key))
    bucket: ((platform-automation-bucket))
    regexp: images/srt-(.*)\.pivotal

- name: hub-product
  type: s3
  source:
    access_key_id: ((s3-access-key-id))
    secret_access_key: ((s3-secret-key))
    bucket: ((platform-automation-bucket))
    regexp: images/tanzu-hub-(.*)\.pivotal

- name: tas-stemcell
  type: s3
  source:
    access_key_id: ((s3-access-key-id))
    secret_access_key: ((s3-secret-key))
    # bucket: ((platform-automation-bucket))
    regexp: bosh-stemcell-(.*)-vsphere-esxi-ubuntu-jammy-fips-go_agent\.tgz

- name: compliance-scanner-product
  type: s3
  source:
    access_key_id: ((s3-access-key-id))
    secret_access_key: ((s3-secret-key))
    bucket: ((platform-automation-bucket))
    regexp: images/p-compliance-scanner-(.*).pivotal

# - name: compliance-scanner-stemcell
#   type: s3
#   source:
#     access_key_id: ((s3-access-key-id))
#     secret_access_key: ((s3-secret-key))
#     bucket: ((platform-automation-bucket))
#     regexp: bosh-stemcell-(.*)-vsphere-esxi-ubuntu-jammy-fips-go_agent\.tgz

- name: state
  type: s3
  source:
    access_key_id: ((s3-access-key-id))
    secret_access_key: ((s3-secret-key))
    bucket: ((platform-automation-bucket))
    versioned_file: state.yml
    initial_content_text: '{}'
    initial_version: 'empty-start'

- name: platform-automation-image
  type: s3
  source:
    access_key_id: ((s3-access-key-id))
    secret_access_key: ((s3-secret-key))
    bucket: ((platform-automation-bucket))
    versioned_file: vsphere-platform-automation-image-5.3.0.tar.gz

- name: platform-automation-tasks
  type: s3
  source:
    access_key_id: ((s3-access-key-id))
    secret_access_key: ((s3-secret-key))
    bucket: ((platform-automation-bucket))
    regexp: .*tasks-(.*).zip

## GITOPS FILES ##  
- name: configuration
  type: git
  source:
    uri: https://github.com/drewilgenfritz-alt/concourse.git
    branch: main

- name: director-config
  type: git
  source:
    uri: https://github.com/drewilgenfritz-alt/concourse.git
    branch: main
    paths: ["config/director.yml"]
- name: tas-config
  type: git
  source:
    uri: https://github.com/drewilgenfritz-alt/concourse.git
    branch: main
    paths: ["config/cf.yml"]
- name: compliance-scanner-config
  type: git
  source:
    uri: https://github.com/drewilgenfritz-alt/concourse.git
    branch: main
    paths: ["config/compliance-scanner.yml"]

- name: opsman-product
  type: s3
  source:
    access_key_id: ((s3-access-key-id))
    secret_access_key: ((s3-secret-key))
    bucket: ((platform-automation-bucket))
    regexp: images/ops-manager-vsphere-(.*)\.ova
  
prepare-tasks-with-secrets: &prepare-tasks-with-secrets
  image: platform-automation-image
  file: platform-automation-tasks/tasks/prepare-tasks-with-secrets.yml
  input_mapping:
    tasks: platform-automation-tasks
    config: configuration
    vars: configuration
  params:
    CONFIG_PATHS: config/config
    VARS_PATHS: vars/vars
  output_mapping:
    tasks: platform-automation-tasks



jobs:
- name: export-installation
  serial: true
  plan:
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: configuration
    - task: prepare-tasks-with-secrets
      <<: *prepare-tasks-with-secrets
    - task: export-installation
      image: platform-automation-image
      file: platform-automation-tasks/tasks/export-installation.yml
      input_mapping:
        env: configuration
      params:
        ENV_FILE: config/vars/env.yml
    - put: installation
      params: { file: installation/installation-*.zip }
- name: test-platform-automation
  serial: true
  plan:
    - in_parallel:
      - get: platform-automation-image
        params:
          unpack: true
      - get: platform-automation-tasks
        params:
          unpack: true
      - get: configuration
    - task: test-interpolate
      image: platform-automation-image
      file: platform-automation-tasks/tasks/test-interpolate.yml
      params:
        CONFIG_FILE: config/vars/env.yml
        SKIP_MISSING: true
      input_mapping:
        config: configuration
    - task: test
      file: platform-automation-tasks/tasks/test.yml
      image: platform-automation-image
- name: upgrade-opsman
  serial: true
  plan:
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: state
    - get: configuration
    - get: opsman-product
    - task: prepare-tasks-with-secrets
      <<: *prepare-tasks-with-secrets
    - task: revert-staged-changes
      image: platform-automation-image
      file: platform-automation-tasks/tasks/revert-staged-changes.yml
      input_mapping:
        env: configuration
      params:
        ENV_FILE: config/vars/env.yml
    - task: export-installation
      image: platform-automation-image
      file: platform-automation-tasks/tasks/export-installation.yml
      input_mapping:
        env: configuration
      params:
        ENV_FILE: config/vars/env.yml
    - put: installation
      params: { file: installation/installation-*.zip }
    - task: upgrade-opsman
      image: platform-automation-image
      file: platform-automation-tasks/tasks/upgrade-opsman.yml
      input_mapping:
        image: opsman-product
        config: configuration
        env: configuration
        # vars: configuration
      params:
        ENV_FILE: config/vars/env.yml
        OPSMAN_CONFIG_FILE: config/opsman.yml
        STATE_FILE: state.yml
        INSTALLATION_FILE: installation*.zip
    - task: configure-director
      image: platform-automation-image
      file: platform-automation-tasks/tasks/configure-director.yml
      input_mapping:
        config: configuration
        env: configuration
      params:
        ENV_FILE: config/vars/env.yml
        DIRECTOR_CONFIG_FILE: config/director.yml
    - task: apply-director-changes
      image: platform-automation-image
      file: platform-automation-tasks/tasks/apply-director-changes.yml
      attempts: 3
      input_mapping:
        env: configuration
      params:
        ENV_FILE: config/vars/env.yml
    - task: export-installation
      image: platform-automation-image
      file: platform-automation-tasks/tasks/export-installation.yml
      input_mapping:
        env: configuration
      params:
        ENV_FILE: config/vars/env.yml
        INSTALLATION_FILE: installation-$timestamp.zip
    - put: installation
      params:
        file: installation/installation*.zip
        # VARS_FILES: vars/vars/director.yml

- name: upload-and-stage-tas
  serial: true
  serial_groups: [ products ]
  plan:
  - in_parallel:
    - get: platform-automation-image
       
      params:
        unpack: true
      trigger: true
      passed: [ "upgrade-opsman" ]
    - get: platform-automation-tasks
       
      params:
        unpack: true
    - get: configuration
       
    - get: tas-product
    # - get: tas-stemcell
  - task: prepare-tasks-with-secrets
    <<: *prepare-tasks-with-secrets
  - task: upload-tas-product
     
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-product.yml
    input_mapping:
      product: tas-product
      env: configuration
    params:
      ENV_FILE: config/vars/env.yml
  # - task: upload-tas-stemcell
     
  #   image: platform-automation-image
  #   file: platform-automation-tasks/tasks/upload-stemcell.yml
  #   input_mapping:
  #     env: configuration
  #     stemcell: tas-stemcell
  #   params:
  #     ENV_FILE: config/vars/env.yml
  - task: upload-and-stage-tas
     
    image: platform-automation-image
    file: platform-automation-tasks/tasks/stage-product.yml
    input_mapping:
      product: tas-product
      env: configuration
    params:
      ENV_FILE: config/vars/env.yml

- name: upload-and-stage-hub
  serial: true
  serial_groups: [ products ]
  plan:
  - in_parallel:
    - get: platform-automation-image
       
      params:
        unpack: true
      trigger: true
      passed: [ "upgrade-opsman" ]
    - get: platform-automation-tasks
       
      params:
        unpack: true
    - get: configuration
       
    - get: hub-product
    - get: tas-stemcell
  - task: prepare-tasks-with-secrets
    <<: *prepare-tasks-with-secrets
  - task: upload-hub-product
     
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-product.yml
    input_mapping:
      product: hub-product
      env: configuration
    params:
      ENV_FILE: config/vars/env.yml
  - task: upload-tas-stemcell
     
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-stemcell.yml
    input_mapping:
      env: configuration
      stemcell: tas-stemcell
    params:
      ENV_FILE: config/vars/env.yml
  - task: upload-and-stage-hub
     
    image: platform-automation-image
    file: platform-automation-tasks/tasks/stage-product.yml
    input_mapping:
      product: hub-product
      env: configuration
    params:
      ENV_FILE: config/vars/env.yml

- name: upload-and-stage-compliance-scanner
  serial: true
  serial_groups: [ products ]
  plan:
  - in_parallel:
    - get: platform-automation-image
      params:
        unpack: true
      trigger: true
      passed: [ "upgrade-opsman" ]
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: configuration
    - get: compliance-scanner-product
    # - get: compliance-scanner-stemcell
  - task: prepare-tasks-with-secrets
    <<: *prepare-tasks-with-secrets
  - task: upload-compliance-scanner-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-product.yml
    input_mapping:
      product: compliance-scanner-product
      env: configuration
    params:
      ENV_FILE: config/vars/env.yml
  # - task: upload-compliance-scanner-stemcell
  #    
  #   image: platform-automation-image
  #   file: platform-automation-tasks/tasks/upload-stemcell.yml
  #   input_mapping:
  #     env: configuration
  #     stemcell: compliance-scanner-stemcell
  #   params:
  #     ENV_FILE: config/vars/env.yml
  - task: upload-and-stage-compliance-scanner
    image: platform-automation-image
    file: platform-automation-tasks/tasks/stage-product.yml
    input_mapping:
      product: compliance-scanner-product
      env: configuration
    params:
      ENV_FILE: config/vars/env.yml

- name: configure-tas
  serial: true
  serial_groups: [ install ]
  plan:
    - in_parallel:
      - get: platform-automation-image
        params:
          unpack: true
        passed:
          - upload-and-stage-tas
        trigger: true
         
      - get: platform-automation-tasks
        params:
          unpack: true
         
      - get: configuration
         
    - task: prepare-tasks-with-secrets
      <<: *prepare-tasks-with-secrets
    - task: configure-tas
      image: platform-automation-image
      file: platform-automation-tasks/tasks/configure-product.yml
      input_mapping:
        config: configuration
        env: configuration
        # vars: configuration
      params:
        CONFIG_FILE: config/cf.yml
        ENV_FILE: config/vars/env.yml
        # VARS_FILES: secrets/tas.yml
       

- name: configure-hub
  serial: true
  serial_groups: [ install ]
  plan:
    - in_parallel:
      - get: platform-automation-image
        params:
          unpack: true
        passed:
          - upload-and-stage-hub
        trigger: true
         
      - get: platform-automation-tasks
        params:
          unpack: true
         
      - get: configuration
         
    - task: prepare-tasks-with-secrets
      <<: *prepare-tasks-with-secrets
    - task: configure-hub
      image: platform-automation-image
      file: platform-automation-tasks/tasks/configure-product.yml
      input_mapping:
        config: configuration
        env: configuration
        # vars: configuration
      params:
        CONFIG_FILE: config/hub.yml
        ENV_FILE: config/vars/env.yml
        # VARS_FILES: secrets/tas.yml
       
- name: configure-compliance-scanner
  serial: true
  serial_groups: [ install ]
  plan:
    - in_parallel:
      - get: platform-automation-image
        params:
          unpack: true
        passed:
          - upload-and-stage-compliance-scanner
        trigger: true
      - get: platform-automation-tasks
        params:
          unpack: true
      - get: configuration
    - task: prepare-tasks-with-secrets
      <<: *prepare-tasks-with-secrets
    - task: configure-compliance-scanner
      image: platform-automation-image
      file: platform-automation-tasks/tasks/configure-product.yml
      input_mapping:
        config: configuration
        env: configuration
        # vars: configuration
      params:
        CONFIG_FILE: config/compliance-scanner.yml
        ENV_FILE: config/vars/env.yml
        # VARS_FILES: secrets/tas.yml

- name: create-root-ca
  plan:
    - in_parallel:
        - get: platform-automation-image
          params:
            unpack: true
 
        - get: platform-automation-tasks
          params:
            unpack: true
 
        - get: configuration
 
    - task: prepare-tasks-with-secrets
      <<: *prepare-tasks-with-secrets
       
    # code_snippet configure-new-certificate-authority-usage start yaml
    - task: create-root-ca
      image: platform-automation-image
      file: platform-automation-tasks/tasks/configure-new-certificate-authority.yml
      input_mapping:
        env: configuration
      params:
        ENV_FILE: config/vars/env.yml
       
    # code_snippet configure-new-certificate-authority-usage end

- name: apply-new-ca
  serial: true
  plan:
    - in_parallel:
        - get: platform-automation-image
          params:
            unpack: true
          passed:
            - create-root-ca
          trigger: true
 
        - get: platform-automation-tasks
          params:
            unpack: true
 
        - get: configuration
 
    - task: prepare-tasks-with-secrets
      <<: *prepare-tasks-with-secrets
       
    - task: pre-deploy-check
      image: platform-automation-image
      file: platform-automation-tasks/tasks/pre-deploy-check.yml
      input_mapping:
        env: configuration
      params:
        ENV_FILE: config/vars/env.yml
       
    - task: apply-product-changes
      attempts: 3
      image: platform-automation-image
      file: platform-automation-tasks/tasks/apply-changes.yml
      input_mapping:
        env: configuration
      params:
        ENV_FILE: config/vars/env.yml
        SELECTIVE_DEPLOY_PRODUCTS: "cf,p-bosh,p-compliance-scanner"
       

- name: activate-new-ca-and-regenerate-certs
  serial: true
  plan:
    - in_parallel:
        - get: platform-automation-image
          params:
            unpack: true
          passed:
            - apply-new-ca
          trigger: true
 
        - get: platform-automation-tasks
          params:
            unpack: true
 
        - get: configuration
 
    - task: prepare-tasks-with-secrets
      <<: *prepare-tasks-with-secrets
       
    # code_snippet activate-certificate-authority-usage start yaml
    - task: activate-new-ca
      image: platform-automation-image
      file: platform-automation-tasks/tasks/activate-certificate-authority.yml
      input_mapping:
        env: configuration
      params:
        ENV_FILE: config/vars/env.yml
       
    # code_snippet activate-certificate-authority-usage end
    # code_snippet regenerate-certificates-usage start yaml
    - task: regenerate-certificates
      image: platform-automation-image
      file: platform-automation-tasks/tasks/regenerate-certificates.yml
      input_mapping:
        env: configuration
      params:
        ENV_FILE: config/vars/env.yml
       
    # code_snippet regenerate-certificates-usage end

- name: apply-certificates
  serial: true
  plan:
    - in_parallel:
        - get: platform-automation-image
          params:
            unpack: true
          passed:
            - activate-new-ca-and-regenerate-certs
          trigger: true
 
        - get: platform-automation-tasks
          params:
            unpack: true
 
        - get: configuration
 
    - task: prepare-tasks-with-secrets
      <<: *prepare-tasks-with-secrets
       
    - task: pre-deploy-check
      image: platform-automation-image
      file: platform-automation-tasks/tasks/pre-deploy-check.yml
      input_mapping:
        env: configuration
      params:
        ENV_FILE: config/vars/env.yml
       
    - task: apply-product-changes
      attempts: 3
      image: platform-automation-image
      file: platform-automation-tasks/tasks/apply-changes.yml
      input_mapping:
        env: configuration
      params:
        ENV_FILE: config/vars/env.yml
        SELECTIVE_DEPLOY_PRODUCTS: "cf,p-bosh,p-compliance-scanner"
       

- name: cleanup-ca-certificate-authorities
  serial: true
  plan:
    - in_parallel:
        - get: platform-automation-image
 
          params:
            unpack: true
          passed:
            - apply-certificates
          trigger: true
        - get: platform-automation-tasks
 
          params:
            unpack: true
        - get: configuration
 
    - task: prepare-tasks-with-secrets
      <<: *prepare-tasks-with-secrets
       
    # code_snippet delete-certificate-authority-usage start yaml
    - task: delete-certificate-authority
      image: platform-automation-image
      file: platform-automation-tasks/tasks/delete-certificate-authority.yml
      input_mapping:
        env: configuration
      params:
        ENV_FILE: config/vars/env.yml
       
    # code_snippet delete-certificate-authority-usage end
    - task: pre-deploy-check
      image: platform-automation-image
      file: platform-automation-tasks/tasks/pre-deploy-check.yml
      input_mapping:
        env: configuration
      params:
        ENV_FILE: config/vars/env.yml
       
    - task: apply-product-changes
      attempts: 3
      image: platform-automation-image
      file: platform-automation-tasks/tasks/apply-changes.yml
      input_mapping:
        env: configuration
      params:
        ENV_FILE: config/vars/env.yml
        SELECTIVE_DEPLOY_PRODUCTS: "cf,p-bosh,p-compliance-scanner"

- name: bump-director
  serial: true
  plan:
    - in_parallel:
        - get: platform-automation-image
          params:
            unpack: true
        - get: platform-automation-tasks
          params:
            unpack: true
        - get: director-config
          trigger: true
        - get: configuration
    - task: prepare-tasks-with-secrets
      <<: *prepare-tasks-with-secrets
    - task: apply-director-changes
      image: platform-automation-image
      file: platform-automation-tasks/tasks/apply-director-changes.yml
      attempts: 3
      input_mapping:
        env: configuration
      params:
        ENV_FILE: config/vars/env.yml
    - task: export-installation
      image: platform-automation-image
      file: platform-automation-tasks/tasks/export-installation.yml
      input_mapping:
        env: configuration
      params:
        ENV_FILE: config/vars/env.yml
        INSTALLATION_FILE: installation-$timestamp.zip
    - put: installation
      params:
        file: installation/installation*.zip
        # VARS_FILES: vars/vars/director.yml
- name: bump-tas
  serial: true
  plan:
    - in_parallel:
        - get: platform-automation-image
          params:
            unpack: true
        - get: platform-automation-tasks
          params:
            unpack: true
        - get: tas-config
          trigger: true
        - get: configuration
    - task: prepare-tasks-with-secrets
      <<: *prepare-tasks-with-secrets
    - task: test
      file: platform-automation-tasks/tasks/test.yml
      image: platform-automation-image
    - task: configure-tas
      image: platform-automation-image
      file: platform-automation-tasks/tasks/configure-product.yml
      input_mapping:
        config: configuration
        env: configuration
        # vars: configuration
      params:
        CONFIG_FILE: config/cf.yml
        ENV_FILE: config/vars/env.yml
        # VARS_FILES: secrets/tas.yml
    - task: pre-deploy-check
      image: platform-automation-image
      file: platform-automation-tasks/tasks/pre-deploy-check.yml
      input_mapping:
        env: configuration
      params:
        ENV_FILE: config/vars/env.yml      
    - task: apply-product-changes
      attempts: 3
      image: platform-automation-image
      file: platform-automation-tasks/tasks/apply-changes.yml
      input_mapping:
        env: configuration
      params:
        ENV_FILE: config/vars/env.yml
        SELECTIVE_DEPLOY_PRODUCTS: "p-bosh,cf"
    - task: export-installation
      image: platform-automation-image
      file: platform-automation-tasks/tasks/export-installation.yml
      input_mapping:
        env: configuration
      params:
        ENV_FILE: config/vars/env.yml
        INSTALLATION_FILE: installation-$timestamp.zip
    - put: installation
      params:
        file: installation/installation*.zip
        # VARS_FILES: vars/vars/director.yml

- name: bump-compliance-scanner
  serial: true
  plan:
    - in_parallel:
        - get: platform-automation-image
          params:
            unpack: true
        - get: platform-automation-tasks
          params:
            unpack: true
        - get: compliance-scanner-config
          trigger: true
        - get: configuration
    - task: prepare-tasks-with-secrets
      <<: *prepare-tasks-with-secrets
    - task: configure-compliance-scanner
      image: platform-automation-image
      file: platform-automation-tasks/tasks/configure-product.yml
      input_mapping:
        config: configuration
        env: configuration
        # vars: configuration
      params:
        CONFIG_FILE: config/compliance-scanner.yml
        ENV_FILE: config/vars/env.yml
        # VARS_FILES: secrets/tas.yml 
    - task: pre-deploy-check
      image: platform-automation-image
      file: platform-automation-tasks/tasks/pre-deploy-check.yml
      input_mapping:
        env: configuration
      params:
        ENV_FILE: config/vars/env.yml      
    - task: apply-product-changes
      attempts: 3
      image: platform-automation-image
      file: platform-automation-tasks/tasks/apply-changes.yml
      input_mapping:
        env: configuration
      params:
        ENV_FILE: config/vars/env.yml
        SELECTIVE_DEPLOY_PRODUCTS: "p-bosh,p-compliance-scanner"
    - task: export-installation
      image: platform-automation-image
      file: platform-automation-tasks/tasks/export-installation.yml
      input_mapping:
        env: configuration
      params:
        ENV_FILE: config/vars/env.yml
        INSTALLATION_FILE: installation-$timestamp.zip
    - put: installation
      params:
        file: installation/installation*.zip
        # VARS_FILES: vars/vars/director.yml

- name: apply-all-changes
  serial: true
  plan:
    - in_parallel:
        - get: platform-automation-image
          passed: [configure-tas, configure-compliance-scanner]
          trigger: true
          params:
            unpack: true
        - get: platform-automation-tasks
          params:
            unpack: true
        - get: configuration
    - task: prepare-tasks-with-secrets
      <<: *prepare-tasks-with-secrets 
    - task: pre-deploy-check
      image: platform-automation-image
      file: platform-automation-tasks/tasks/pre-deploy-check.yml
      input_mapping:
        env: configuration
      params:
        ENV_FILE: config/vars/env.yml      
    - task: apply-product-changes
      attempts: 3
      image: platform-automation-image
      file: platform-automation-tasks/tasks/apply-changes.yml
      input_mapping:
        env: configuration
      params:
        ENV_FILE: config/vars/env.yml
    - task: export-installation
      image: platform-automation-image
      file: platform-automation-tasks/tasks/export-installation.yml
      input_mapping:
        env: configuration
      params:
        ENV_FILE: config/vars/env.yml
        INSTALLATION_FILE: installation-$timestamp.zip
    - put: installation
      params:
        file: installation/installation*.zip
        # VARS_FILES: vars/vars/director.yml

